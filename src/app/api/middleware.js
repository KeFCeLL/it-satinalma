import { NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';
import { cookies } from 'next/headers';

// Loglama iÅŸlevleri
function logInfo(message, data = null) {
  const logMsg = `ğŸ”µ [Middleware] ${message}`;
  if (data) {
    console.log(logMsg, data);
  } else {
    console.log(logMsg);
  }
}

function logError(message, error = null) {
  const logMsg = `ğŸ”´ [Middleware] ${message}`;
  if (error) {
    console.error(logMsg, error);
  } else {
    console.error(logMsg);
  }
}

// GeliÅŸtirme modu kontrolÃ¼
const IS_DEV_MODE = process.env.NODE_ENV !== 'production' || process.env.NEXT_PUBLIC_DEV_API === 'true' || process.env.DB_BYPASS === 'true';

// Ortam deÄŸiÅŸkenlerini logla
logInfo('Middleware yÃ¼kleniyor', {
  NODE_ENV: process.env.NODE_ENV,
  NEXT_PUBLIC_DEV_API: process.env.NEXT_PUBLIC_DEV_API,
  DB_BYPASS: process.env.DB_BYPASS,
  IS_DEV_MODE
});

export function withAuth(handler) {
  return async (request, params) => {
    try {
      // GeliÅŸtirme modunda yetkilendirmeyi bypass et
      if (IS_DEV_MODE) {
        logInfo('ğŸ”§ GeliÅŸtirme modu: Yetkilendirme bypass ediliyor');
        
        // GeliÅŸtirme iÃ§in sahte kullanÄ±cÄ± oluÅŸtur
        request.user = {
          id: 'dev-user',
          email: 'dev@example.com',
          ad: 'GeliÅŸtirme',
          soyad: 'KullanÄ±cÄ±sÄ±',
          rol: 'ADMIN',
          departmanId: 'dev-dep-1'
        };
        
        logInfo('Dev kullanÄ±cÄ±sÄ± oluÅŸturuldu:', request.user);
        return handler(request, params);
      }
      
      // Cookie'den token al
      const cookieStore = await cookies();
      const token = cookieStore.get('token')?.value;
      
      if (!token) {
        logError('Token bulunamadÄ±');
        return NextResponse.json(
          { error: "Yetkilendirme baÅŸarÄ±sÄ±z: Token bulunamadÄ±" },
          { status: 401 }
        );
      }

      try {
        // Token'Ä± doÄŸrula
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        
        // Request nesnesine kullanÄ±cÄ± bilgilerini ekle
        request.user = decoded;
        
        logInfo('Token doÄŸrulandÄ± ve kullanÄ±cÄ± bilgisi eklendi:', decoded);
        
        // Orijinal handler'Ä± Ã§aÄŸÄ±r
        return handler(request, params);
      } catch (error) {
        logError("Token doÄŸrulama hatasÄ±:", error);
        
        return NextResponse.json(
          { error: "Yetkilendirme baÅŸarÄ±sÄ±z: GeÃ§ersiz token" },
          { status: 401 }
        );
      }
    } catch (error) {
      logError("withAuth middleware hatasÄ±:", error);
      
      return NextResponse.json(
        { error: "Sunucu hatasÄ±" },
        { status: 500 }
      );
    }
  };
}

// Belirli rollere sahip kullanÄ±cÄ±lar iÃ§in yetkilendirme
export function withRole(handler, allowedRoles) {
  return async (request, params) => {
    try {
      // GeliÅŸtirme modunda yetkilendirmeyi bypass et
      if (IS_DEV_MODE) {
        logInfo(`ğŸ”§ GeliÅŸtirme modu: Rol kontrolÃ¼ bypass ediliyor (Ä°stenen roller: ${allowedRoles.join(', ')})`);
        
        // GeliÅŸtirme iÃ§in sahte kullanÄ±cÄ± oluÅŸtur (ADMIN rolÃ¼yle)
        request.user = {
          id: 'dev-user',
          email: 'dev@example.com',
          ad: 'GeliÅŸtirme',
          soyad: 'KullanÄ±cÄ±sÄ±',
          rol: 'ADMIN',
          departmanId: 'dev-dep-1'
        };
        
        logInfo('Dev kullanÄ±cÄ±sÄ± oluÅŸturuldu (rol kontrolÃ¼):', request.user);
        return handler(request, params);
      }
      
      // Ã–nce withAuth ile yetkilendirme yap
      const authMiddleware = withAuth(async (req) => {
        // KullanÄ±cÄ±nÄ±n rolÃ¼nÃ¼ kontrol et
        const userRole = req.user.rol;
        
        if (!allowedRoles.includes(userRole)) {
          logError(`EriÅŸim reddedildi: KullanÄ±cÄ± rolÃ¼ "${userRole}", istenen roller: ${allowedRoles.join(', ')}`);
          return NextResponse.json(
            { error: "EriÅŸim reddedildi: Yetkiniz yok" },
            { status: 403 }
          );
        }
        
        logInfo(`Rol kontrolÃ¼ baÅŸarÄ±lÄ±: "${userRole}"`);
        
        // Orijinal handler'Ä± Ã§aÄŸÄ±r
        return handler(req, params);
      });
      
      // Middleware'i Ã§alÄ±ÅŸtÄ±r
      return authMiddleware(request, params);
    } catch (error) {
      logError("withRole middleware hatasÄ±:", error);
      
      return NextResponse.json(
        { error: "Sunucu hatasÄ±" },
        { status: 500 }
      );
    }
  };
} 