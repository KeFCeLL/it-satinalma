import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { withAuth, withRole } from '@/app/api/middleware';

// Loglama iÅŸlevi
function logInfo(message: string, data: any = null) {
  const logMsg = `ğŸ”µ [API/Urunler/Kategoriler/Urunler] ${message}`;
  if (data) {
    console.log(logMsg, data);
  } else {
    console.log(logMsg);
  }
}

function logError(message: string, error: any = null) {
  const logMsg = `ğŸ”´ [API/Urunler/Kategoriler/Urunler] ${message}`;
  if (error) {
    console.error(logMsg, error);
  } else {
    console.error(logMsg);
  }
}

async function deleteKategoriUrunleriHandler(
  request: Request,
  { params }: { params: { kategori: string } }
) {
  try {
    const { kategori } = params;
    
    logInfo(`Kategori Ã¼rÃ¼nlerini silme isteÄŸi:`, { kategori });

    try {
      // Kategorideki Ã¼rÃ¼nleri sil
      const result = await prisma.urun.deleteMany({
        where: {
          kategori: kategori
        }
      });

      logInfo(`Kategori Ã¼rÃ¼nleri baÅŸarÄ±yla silindi:`, { 
        kategori,
        silinenUrunSayisi: result.count 
      });

      return NextResponse.json({
        success: true,
        message: `${result.count} Ã¼rÃ¼n baÅŸarÄ±yla silindi`
      });

    } catch (error: any) {
      logError('VeritabanÄ± hatasÄ±:', error);
      return NextResponse.json(
        { success: false, error: 'ÃœrÃ¼nler silinirken bir hata oluÅŸtu' },
        { status: 500 }
      );
    }
  } catch (error: any) {
    logError('Ä°stek iÅŸlenirken bir hata oluÅŸtu:', error);
    return NextResponse.json(
      { success: false, error: 'Sunucu hatasÄ±' },
      { status: 500 }
    );
  }
}

async function updateUrunKategorileriHandler(
  request: Request,
  { params }: { params: { kategori: string } }
) {
  try {
    const { kategori } = params;
    const body = await request.json();
    const { yeniKategori } = body;

    if (!yeniKategori) {
      return NextResponse.json(
        { success: false, message: "Yeni kategori belirtilmedi" },
        { status: 400 }
      );
    }

    // ÃœrÃ¼nleri yeni kategoriye taÅŸÄ±
    await prisma.urun.updateMany({
      where: {
        kategori: kategori,
      },
      data: {
        kategori: yeniKategori,
      },
    });

    return NextResponse.json({
      success: true,
      message: "ÃœrÃ¼nler baÅŸarÄ±yla taÅŸÄ±ndÄ±",
    });
  } catch (error) {
    console.error('ÃœrÃ¼n kategorileri gÃ¼ncelleme hatasÄ±:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: `ÃœrÃ¼nler taÅŸÄ±nÄ±rken bir hata oluÅŸtu: ${error instanceof Error ? error.message : 'Bilinmeyen hata'}` 
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// Sadece ADMIN ve IT_ADMIN rollerine sahip kullanÄ±cÄ±lar Ã¼rÃ¼nleri silebilir
export const DELETE = withAuth(withRole(['ADMIN', 'IT_ADMIN'], deleteKategoriUrunleriHandler));
export const PATCH = withRole(updateUrunKategorileriHandler, ["ADMIN", "IT_ADMIN", "SATINALMA_ADMIN"]); 