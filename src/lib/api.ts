/**
 * API istekleri iÃ§in yardÄ±mcÄ± iÅŸlevler
 */

import { useAuth } from "./context/auth-context";
import { getApiPath } from './api-config';

// API kullanÄ±m modu
type ApiMode = 'normal' | 'mock';

// GeÃ§erli API modunu belirle
function getCurrentApiMode(): ApiMode {
  // Server-side rendering sÄ±rasÄ±nda
  if (typeof window === 'undefined') {
    // Vercel production'da her zaman normal mod kullan
    if (process.env.VERCEL_ENV === 'production') {
      return 'normal';
    }
    return 'mock'; // Vercel build ve SSR sÄ±rasÄ±nda mock mod kullan
  }
  
  // Client tarafÄ±nda
  try {
    // Ã–ncelik sÄ±rasÄ±:
    // 1. localStorage
    // 2. Ã§evre deÄŸiÅŸkenleri
    // 3. VarsayÄ±lan: normal (production'da)
    
    // localStorage kontrolÃ¼
    const storedMode = window.localStorage.getItem('useMockApi');
    if (storedMode === 'false') return 'normal';
    if (storedMode === 'true') return 'mock';
    
    // Ã‡evre deÄŸiÅŸkeni kontrolÃ¼
    if (process.env.NEXT_PUBLIC_USE_MOCK_API === 'false') return 'normal';
    if (process.env.NEXT_PUBLIC_USE_MOCK_API === 'true') return 'mock';
    
    // VarsayÄ±lan olarak normal kullan Ã§Ã¼nkÃ¼ production'da gerÃ§ek API'ye eriÅŸim gerekir
    return 'normal';
  } catch (e) {
    console.error('API modu belirleme hatasÄ±:', e);
    return 'normal'; // Hata durumunda gÃ¼venli mod
  }
}

// API isteÄŸi yapmak iÃ§in yardÄ±mcÄ± iÅŸlev
export async function fetchWithAuth(
  endpoint: string,
  options: RequestInit = {}
): Promise<Response> {
  // API modunu belirle
  const apiMode = getCurrentApiMode();
  console.log(`ğŸ”Œ API Modu: ${apiMode}`);
  
  // Mock API desteÄŸi iÃ§in endpoint'i dÃ¶nÃ¼ÅŸtÃ¼r
  const transformedEndpoint = apiMode === 'mock' ? getApiPath(endpoint) : endpoint;
  
  // Check if we're on the server side
  const isServer = typeof window === 'undefined';
  
  let url = transformedEndpoint;
  
  // For server-side requests during build or when no API is available
  if (isServer) {
    // Detect if we're in a build/CI environment
    const isBuildEnv = process.env.VERCEL_ENV === 'production' || 
                        process.env.NODE_ENV === 'production' ||
                        process.env.CI === 'true';
    
    if (isBuildEnv && endpoint.startsWith('/api/')) {
      console.warn(`[Build Mode] Mocking API request to: ${endpoint}`);
      
      // Return empty mock responses based on endpoint type
      if (endpoint.includes('departmanlar')) {
        return new Response(JSON.stringify({ departmanlar: [] }), {
          headers: { 'content-type': 'application/json' },
        });
      }
      
      return new Response(JSON.stringify({ data: [] }), {
        headers: { 'content-type': 'application/json' },
      });
    }
    
    // Regular server-side request (not during build)
    if (endpoint.startsWith('/')) {
      const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';
      url = `${baseUrl}${endpoint}`;
    }
    
    console.warn('fetchWithAuth server-side Ã§aÄŸrÄ±ldÄ±, URL:', url);
    return fetch(url, options);
  }

  // Options iÃ§ine credentials ekle
  const config: RequestInit = {
    ...options,
    credentials: "include", // Cookie'leri dahil et
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  };

  try {
    // Ä°stek yap
    let response = await fetch(url, config);
    console.log(`API isteÄŸi: ${url}, Durum: ${response.status}`);

    // Token hatasÄ± varsa ve refresh token mevcutsa, token'Ä± yenile ve tekrar dene
    if (response.status === 401) {
      console.log("401 hatasÄ± alÄ±ndÄ±, token yenileniyor...");
      
      try {
        // 401 hatasÄ± alÄ±ndÄ±, token yenilemeye Ã§alÄ±ÅŸ
        console.log("Token yenileme isteÄŸi yapÄ±lÄ±yor");
        const refreshResponse = await fetch("/api/auth/refresh", {
          method: "POST",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
        });

        // YanÄ±t durumunu kontrol et
        console.log(`Token yenileme yanÄ±tÄ±: ${refreshResponse.status}`);
        
        // YanÄ±t iÃ§eriÄŸini log'a yazdÄ±r
        let refreshBody;
        try {
          // Clone response Ã§Ã¼nkÃ¼ response.text() body'yi tÃ¼ketir
          const clonedResponse = refreshResponse.clone();
          refreshBody = await clonedResponse.text();
          console.log("Token yenileme yanÄ±tÄ± (raw):", refreshBody);
        } catch (e) {
          console.error("Token yenileme yanÄ±tÄ± okunamadÄ±:", e);
        }

        // Token yenileme baÅŸarÄ±lÄ± olduysa isteÄŸi tekrarla
        if (refreshResponse.ok) {
          console.log("Token yenileme baÅŸarÄ±lÄ±, istek tekrarlanÄ±yor...");
          
          // Orijinal isteÄŸi tekrarla
          try {
            const newResponse = await fetch(url, config);
            console.log(`Tekrar edilen istek yanÄ±tÄ±: ${newResponse.status}`);
            return newResponse;
          } catch (retryError) {
            console.error("Ä°steÄŸi tekrarlama hatasÄ±:", retryError);
            return response; // Orijinal 401 yanÄ±tÄ±nÄ± dÃ¶ndÃ¼r
          }
        } else {
          console.error("Token yenileme baÅŸarÄ±sÄ±z:", refreshResponse.status, refreshBody);
          
          // Yenileme baÅŸarÄ±sÄ±z olduysa orijinal 401 yanÄ±tÄ±nÄ± dÃ¶ndÃ¼r
          return response;
        }
      } catch (refreshError) {
        console.error("Token yenileme sÄ±rasÄ±nda hata:", refreshError);
        return response; // Orijinal 401 yanÄ±tÄ±nÄ± dÃ¶ndÃ¼r
      }
    }

    return response;
  } catch (error) {
    console.error("API isteÄŸi hatasÄ±:", error);
    throw error;
  }
}

// API sonuÃ§larÄ±nÄ± iÅŸlemek iÃ§in yardÄ±mcÄ± iÅŸlev
export async function handleApiResponse<T>(response: Response): Promise<T> {
  let responseText = '';
  try {
    // Ã–nce response iÃ§eriÄŸini text olarak alÄ±p saklayalÄ±m
    responseText = await response.text();
    
    // BoÅŸ yanÄ±t kontrolÃ¼
    if (!responseText || responseText.trim() === '') {
      console.error("API boÅŸ yanÄ±t dÃ¶ndÃ¼rdÃ¼:", response.status, response.statusText);
      
      // BoÅŸ yanÄ±t durumunda varsayÄ±lan bir yanÄ±t oluÅŸtur
      return {
        success: false,
        message: `Sunucu boÅŸ yanÄ±t dÃ¶ndÃ¼rdÃ¼. Durum: ${response.status} ${response.statusText}`,
        data: []
      } as unknown as T;
    }
    
    try {
      // Text'i JSON'a Ã§evirelim
      const data = JSON.parse(responseText);
      
      if (!response.ok) {
        // API hata mesajÄ±nÄ± kullan veya varsayÄ±lan mesaj dÃ¶ndÃ¼r
        const error = data.message || "Bir ÅŸeyler yanlÄ±ÅŸ gitti";
        console.error("API hata yanÄ±tÄ±:", error, data);
        
        // Hata durumunda bile veri dÃ¶nmesini saÄŸla (crash'i engelle)
        return {
          success: false,
          message: error,
          data: []
        } as unknown as T;
      }
      
      return data as T;
    } catch (jsonError) {
      // JSON ayrÄ±ÅŸtÄ±rma hatasÄ±
      console.error("Ham API yanÄ±tÄ± ayrÄ±ÅŸtÄ±rÄ±lamadÄ±:", responseText);
      console.error("JSON ayrÄ±ÅŸtÄ±rma hatasÄ±:", jsonError);
      
      // JSON hatasÄ± durumunda da varsayÄ±lan bir yanÄ±t oluÅŸtur
      return {
        success: false,
        message: `API yanÄ±tÄ± geÃ§erli JSON formatÄ±nda deÄŸil: ${(jsonError as Error).message}`,
        data: []
      } as unknown as T;
    }
  } catch (error) {
    // Text alÄ±nÄ±rken veya JSON ayrÄ±ÅŸtÄ±rÄ±lÄ±rken hata oluÅŸtu
    console.error("Ham API yanÄ±tÄ± iÅŸlenirken hata:", error);
    
    // Hata durumunda da veri dÃ¶nmesini saÄŸla (crash'i engelle)
    return {
      success: false,
      message: error instanceof Error ? error.message : "API yanÄ±tÄ± iÅŸlenirken beklenmeyen bir hata oluÅŸtu",
      data: []
    } as unknown as T;
  }
}

// SayfalandÄ±rma iÃ§in tip tanÄ±mlamasÄ±
export type PaginatedResponse<T> = {
  data: T[];
  meta: {
    toplam: number;
    sayfaBasi: number;
    mevcutSayfa: number;
    sonSayfa: number;
  };
};

// API'ye gÃ¶nderilecek sayfalandÄ±rma parametreleri
export type PaginationParams = {
  sayfa?: number;
  sayfaBasi?: number;
  siralamaAlani?: string;
  siralamaYonu?: "asc" | "desc";
};

// URL'e sorgu parametreleri eklemek iÃ§in yardÄ±mcÄ± iÅŸlev
export function addQueryParams(url: string, params: Record<string, any>): string {
  const origin = typeof window !== 'undefined' ? window.location.origin : '';
  const urlObj = new URL(url, origin);
  
  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== "") {
      urlObj.searchParams.append(key, String(value));
    }
  });
  
  return urlObj.toString();
}

// API istek hatalarÄ±nÄ± iÅŸlemek iÃ§in yardÄ±mcÄ± fonksiyon
export const handleRequestError = (error: any) => {
  if (error instanceof Error) {
    return {
      success: false,
      message: error.message
    };
  }
  
  return {
    success: false,
    message: "Beklenmeyen bir hata oluÅŸtu"
  };
}; 