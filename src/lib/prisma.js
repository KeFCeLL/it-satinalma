/**
 * @file prisma.js
 * @description Prisma client iÃ§in geliÅŸmiÅŸ singleton yÃ¶netimi ve hata kontrolÃ¼
 */

import { PrismaClient } from '@prisma/client';

// Konsola hata / bilgi loglarÄ±
function logInfo(message) {
  console.log(`ğŸ”µ [Prisma] ${message}`);
}

function logError(message, error) {
  console.error(`ğŸ”´ [Prisma] ${message}`, error);
}

function logWarning(message) {
  console.warn(`ğŸŸ  [Prisma] ${message}`);
}

// Ortam deÄŸiÅŸkenlerini kontrol et
function checkEnvironmentVariables() {
  const requiredVars = [
    { name: 'DATABASE_URL', fallback: 'POSTGRES_PRISMA_URL' },
    { name: 'POSTGRES_URL_NON_POOLING', fallback: 'DATABASE_URL_UNPOOLED' }
  ];
  
  const missing = [];
  
  for (const { name, fallback } of requiredVars) {
    if (!process.env[name] && !process.env[fallback]) {
      missing.push(`${name} (veya ${fallback})`);
    }
  }
  
  if (missing.length > 0) {
    logWarning(`Eksik ortam deÄŸiÅŸkenleri tespit edildi: ${missing.join(', ')}`);
    return false;
  }
  
  return true;
}

// TarayÄ±cÄ± tarafÄ±nda Ã§alÄ±ÅŸtÄ±ÄŸÄ±mÄ±zÄ± kontrol et
const isClient = typeof window !== 'undefined';
const isTest = process.env.NODE_ENV === 'test';
const isDev = process.env.NODE_ENV === 'development';

let prisma;

// PrismaClient'Ä± baÅŸlat
if (isClient) {
  // TarayÄ±cÄ± tarafÄ±nda prisma kullanmÄ±yoruz
  logInfo('TarayÄ±cÄ± ortamÄ±nda Ã§alÄ±ÅŸÄ±lÄ±yor, PrismaClient oluÅŸturulmadÄ±');
  prisma = null;
} else {
  // Sunucu tarafÄ±nda
  
  // Ortam deÄŸiÅŸkenlerini kontrol et
  const envOk = checkEnvironmentVariables();
  
  try {
    // Global singleton pattern
    const globalForPrisma = global;
    
    // Prisma istemcisi options
    const prismaOptions = {
      log: isDev ? ['error', 'warn'] : ['error'],
      errorFormat: 'colorless',
    };
    
    // URL belirtilmiÅŸse datasource ekle
    const url = process.env.POSTGRES_PRISMA_URL || process.env.DATABASE_URL;
    if (url) {
      prismaOptions.datasources = {
        db: {
          url
        }
      };
    }
    
    if (globalForPrisma.prisma) {
      // Mevcut prisma singletonunu kullan
      logInfo('Mevcut PrismaClient kullanÄ±lÄ±yor');
      prisma = globalForPrisma.prisma;
    } else {
      // Yeni prisma singletonunu oluÅŸtur
      logInfo('Yeni PrismaClient oluÅŸturuluyor');
      
      // Test ortamÄ±nda farklÄ± bir veritabanÄ± kullanabilirsiniz
      prisma = new PrismaClient(prismaOptions);
      
      // Global nesneye ata (Hot reloading'de Ã§oklu baÄŸlantÄ±larÄ± Ã¶nler)
      if (process.env.NODE_ENV !== 'production') {
        globalForPrisma.prisma = prisma;
      }
      
      // Uygulama kapatÄ±ldÄ±ÄŸÄ±nda baÄŸlantÄ±yÄ± kapat
      if (!isTest) {
        // Process kapanma olaylarÄ±nÄ± dinle
        process.on('beforeExit', async () => {
          await prisma.$disconnect();
          logInfo('Prisma baÄŸlantÄ±sÄ± kapatÄ±ldÄ± (beforeExit)');
        });
        
        process.on('SIGINT', async () => {
          await prisma.$disconnect();
          logInfo('Prisma baÄŸlantÄ±sÄ± kapatÄ±ldÄ± (SIGINT)');
          process.exit(0);
        });
        
        process.on('SIGTERM', async () => {
          await prisma.$disconnect();
          logInfo('Prisma baÄŸlantÄ±sÄ± kapatÄ±ldÄ± (SIGTERM)');
          process.exit(0);
        });
      }
    }
    
    // PrismaClient olay dinleyicileri
    prisma.$on('query', (e) => {
      if (process.env.DEBUG_PRISMA === 'true') {
        console.log('Sorgu: ' + e.query);
        console.log('Params: ' + e.params);
        console.log('SÃ¼re: ' + e.duration + 'ms');
      }
    });
    
    prisma.$on('error', (e) => {
      logError('Prisma hata olayÄ± tetiklendi:', e);
    });
    
  } catch (error) {
    logError('PrismaClient baÅŸlatÄ±lÄ±rken hata oluÅŸtu:', error);
    throw error;
  }
}

export default prisma; 